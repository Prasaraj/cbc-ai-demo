import streamlit as st
import pandas as pd
import requests

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
st.set_page_config(page_title="AI Blood Test Analyzer", page_icon="ü©∏", layout="wide")
st.title("ü©∏ Hybrid AI System for CBC Analysis")
st.write("‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î (CBC) ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á User Interface ---
st.header("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ")
col1, col2, col3 = st.columns(3)
with col1:
    age_y = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)", 0, 120, 35, 1)
    sex = st.selectbox("‡πÄ‡∏û‡∏®", ("Female", "Male"))
    hct = st.number_input("HCT (%)", 10.0, 70.0, 38.0, 0.1)
with col2:
    mcv = st.number_input("MCV (fL)", 50.0, 150.0, 85.0, 0.1)
    wbc = st.number_input("WBC (cells/mcL)", 1000.0, 50000.0, 7500.0, 100.0, format="%.0f")
    plt_count = st.number_input("Platelet Count (cells/mcL)", 10000.0, 1000000.0, 250000.0, 1000.0, format="%.0f")
with col3:
    neutrophile = st.number_input("Neutrophil (%)", 0.0, 100.0, 60.0, 0.1)
    eosinophile = st.number_input("Eosinophil (%)", 0.0, 100.0, 2.0, 0.1)
    monocyte = st.number_input("Monocyte (%)", 0.0, 100.0, 5.0, 0.1)

# --- ‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞ Logic ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ---
if st.button("üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡πÄ‡∏•‡∏∑‡∏≠‡∏î", use_container_width=True):
    with st.spinner("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
        patient_data = {
            "sex": sex, "age_y": age_y, "HCT": hct, "MCV": mcv, "WBC": wbc,
            "NEUTROPHILE": neutrophile, "EOSINOPHILE": eosinophile,
            "MONOCYTE": monocyte, "PLT_COUNT": plt_count
        }
        api_url = "/api/predict" # ‡πÉ‡∏ä‡πâ relative path
        try:
            response = requests.post(api_url, json=patient_data, timeout=40)
            response.raise_for_status()
            result = response.json()
            predictions = result.get("predictions", {})
            
            st.subheader("üìú ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö AI")
            found_conditions = [
                label.replace('is_', '').replace('_', ' ').title()
                for label, value in predictions.items() if value == 1
            ]
            if not found_conditions:
                st.success("üü¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
            else:
                for condition in found_conditions:
                    st.warning(f"üî¥ ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {condition}")
            st.info("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢")
        except requests.exceptions.RequestException as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI API: {e}")